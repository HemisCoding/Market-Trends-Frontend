{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x800080);\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      renderer.shadowMap.enabled = true;\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 20, 10);\n      directionalLight.castShadow = true;\n      scene.add(directionalLight);\n\n      // Simple Road Segment\n      const roadGeometry = new THREE.BoxGeometry(10, 0.1, 1); // Simple straight road\n      const roadMaterial = new THREE.MeshLambertMaterial({\n        color: 0x333333\n      });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.position.set(0, 0, 0);\n      roadMesh.castShadow = true;\n      roadMesh.receiveShadow = true;\n      scene.add(roadMesh);\n\n      // Simple Milestones\n      const milestones = [{\n        position: [-4, 0.3, 0],\n        color: 0xff5722\n      }, {\n        position: [-2, 0.3, 0],\n        color: 0xff4081\n      }, {\n        position: [0, 0.3, 0],\n        color: 0x3f51b5\n      }, {\n        position: [2, 0.3, 0],\n        color: 0x4caf50\n      }];\n      milestones.forEach(milestone => {\n        const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n        const milestoneMaterial = new THREE.MeshLambertMaterial({\n          color: milestone.color\n        });\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(...milestone.position);\n        milestoneMesh.castShadow = true;\n        milestoneMesh.receiveShadow = true;\n        scene.add(milestoneMesh);\n      });\n\n      // Camera Position\n      camera.position.set(0, 2, 10);\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","initThreeJS","methods","scene","Scene","background","Color","camera","PerspectiveCamera","$refs","threeContainer","offsetWidth","offsetHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","castShadow","roadGeometry","BoxGeometry","roadMaterial","MeshLambertMaterial","color","roadMesh","Mesh","receiveShadow","milestones","forEach","milestone","milestoneGeometry","CylinderGeometry","milestoneMaterial","milestoneMesh","lookAt","animate","requestAnimationFrame","render","window","addEventListener","aspect","updateProjectionMatrix"],"sources":["src/components/RoadMap.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"container\">\n    <v-row justify=\"center\">\n      <v-col cols=\"12\">\n        <div ref=\"threeContainer\" class=\"three-container\"></div>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x800080);\n\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      renderer.shadowMap.enabled = true;\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 20, 10);\n      directionalLight.castShadow = true;\n      scene.add(directionalLight);\n\n      // Simple Road Segment\n      const roadGeometry = new THREE.BoxGeometry(10, 0.1, 1); // Simple straight road\n      const roadMaterial = new THREE.MeshLambertMaterial({ color: 0x333333 });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.position.set(0, 0, 0);\n      roadMesh.castShadow = true;\n      roadMesh.receiveShadow = true;\n      scene.add(roadMesh);\n\n      // Simple Milestones\n      const milestones = [\n        { position: [-4, 0.3, 0], color: 0xff5722 },\n        { position: [-2, 0.3, 0], color: 0xff4081 },\n        { position: [0, 0.3, 0], color: 0x3f51b5 },\n        { position: [2, 0.3, 0], color: 0x4caf50 },\n      ];\n\n      milestones.forEach((milestone) => {\n        const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n        const milestoneMaterial = new THREE.MeshLambertMaterial({ color: milestone.color });\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(...milestone.position);\n        milestoneMesh.castShadow = true;\n        milestoneMesh.receiveShadow = true;\n        scene.add(milestoneMesh);\n      });\n\n      // Camera Position\n      camera.position.set(0, 2, 10);\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  background-color: #800080;\n}\n</style>\n\n<style>\n.three-container {\n  width: 100%;\n  height: 600px;\n}\n</style>\n"],"mappings":"AAWA,YAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACA,MAAAE,KAAA,OAAAL,KAAA,CAAAM,KAAA;MACAD,KAAA,CAAAE,UAAA,OAAAP,KAAA,CAAAQ,KAAA;MAEA,MAAAC,MAAA,OAAAT,KAAA,CAAAU,iBAAA,UAAAC,KAAA,CAAAC,cAAA,CAAAC,WAAA,QAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACA,MAAAC,QAAA,OAAAf,KAAA,CAAAgB,aAAA;QAAAC,SAAA;MAAA;MACAF,QAAA,CAAAG,OAAA,MAAAP,KAAA,CAAAC,cAAA,CAAAC,WAAA,OAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACAC,QAAA,CAAAI,SAAA,CAAAC,OAAA;MACA,KAAAT,KAAA,CAAAC,cAAA,CAAAS,WAAA,CAAAN,QAAA,CAAAO,UAAA;;MAEA;MACA,MAAAC,YAAA,OAAAvB,KAAA,CAAAwB,YAAA;MACAnB,KAAA,CAAAoB,GAAA,CAAAF,YAAA;MAEA,MAAAG,gBAAA,OAAA1B,KAAA,CAAA2B,gBAAA;MACAD,gBAAA,CAAAE,QAAA,CAAAC,GAAA;MACAH,gBAAA,CAAAI,UAAA;MACAzB,KAAA,CAAAoB,GAAA,CAAAC,gBAAA;;MAEA;MACA,MAAAK,YAAA,OAAA/B,KAAA,CAAAgC,WAAA;MACA,MAAAC,YAAA,OAAAjC,KAAA,CAAAkC,mBAAA;QAAAC,KAAA;MAAA;MACA,MAAAC,QAAA,OAAApC,KAAA,CAAAqC,IAAA,CAAAN,YAAA,EAAAE,YAAA;MACAG,QAAA,CAAAR,QAAA,CAAAC,GAAA;MACAO,QAAA,CAAAN,UAAA;MACAM,QAAA,CAAAE,aAAA;MACAjC,KAAA,CAAAoB,GAAA,CAAAW,QAAA;;MAEA;MACA,MAAAG,UAAA,IACA;QAAAX,QAAA;QAAAO,KAAA;MAAA,GACA;QAAAP,QAAA;QAAAO,KAAA;MAAA,GACA;QAAAP,QAAA;QAAAO,KAAA;MAAA,GACA;QAAAP,QAAA;QAAAO,KAAA;MAAA,EACA;MAEAI,UAAA,CAAAC,OAAA,CAAAC,SAAA;QACA,MAAAC,iBAAA,OAAA1C,KAAA,CAAA2C,gBAAA;QACA,MAAAC,iBAAA,OAAA5C,KAAA,CAAAkC,mBAAA;UAAAC,KAAA,EAAAM,SAAA,CAAAN;QAAA;QACA,MAAAU,aAAA,OAAA7C,KAAA,CAAAqC,IAAA,CAAAK,iBAAA,EAAAE,iBAAA;QACAC,aAAA,CAAAjB,QAAA,CAAAC,GAAA,IAAAY,SAAA,CAAAb,QAAA;QACAiB,aAAA,CAAAf,UAAA;QACAe,aAAA,CAAAP,aAAA;QACAjC,KAAA,CAAAoB,GAAA,CAAAoB,aAAA;MACA;;MAEA;MACApC,MAAA,CAAAmB,QAAA,CAAAC,GAAA;MACApB,MAAA,CAAAqC,MAAA;;MAEA;MACA,MAAAC,OAAA,GAAAA,CAAA;QACAC,qBAAA,CAAAD,OAAA;QACAhC,QAAA,CAAAkC,MAAA,CAAA5C,KAAA,EAAAI,MAAA;MACA;MAEAsC,OAAA;;MAEA;MACAG,MAAA,CAAAC,gBAAA;QACA1C,MAAA,CAAA2C,MAAA,QAAAzC,KAAA,CAAAC,cAAA,CAAAC,WAAA,QAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;QACAL,MAAA,CAAA4C,sBAAA;QACAtC,QAAA,CAAAG,OAAA,MAAAP,KAAA,CAAAC,cAAA,CAAAC,WAAA,OAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}