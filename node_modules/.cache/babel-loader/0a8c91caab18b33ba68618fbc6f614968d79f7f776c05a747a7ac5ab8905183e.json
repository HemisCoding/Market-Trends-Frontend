{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n\n      // Set background color to white\n      scene.background = new THREE.Color(0xffffff);\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(black, 0.8);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 10, 10).normalize();\n      scene.add(directionalLight);\n\n      // Create Road\n      const roadShape = new THREE.Shape();\n      roadShape.moveTo(-5, -1);\n      roadShape.lineTo(5, -1);\n      roadShape.lineTo(5, 1);\n      roadShape.lineTo(-5, 1);\n      roadShape.lineTo(-5, -1);\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.2,\n        bevelEnabled: false\n      };\n      const roadGeometry = new THREE.ExtrudeGeometry(roadShape, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({\n        color: 0x666666\n      });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      scene.add(roadMesh);\n\n      // Create Milestones\n      const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n      const milestoneMaterial = new THREE.MeshLambertMaterial({\n        color: 0xff0000\n      });\n      const milestones = [];\n      for (let i = 0; i < 4; i++) {\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(-4 + i * 3, 0.5, 0);\n        scene.add(milestoneMesh);\n        milestones.push(milestoneMesh);\n      }\n\n      // Camera Position\n      camera.position.z = 7; // Move the camera closer\n      camera.position.y = 2;\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","initThreeJS","methods","scene","Scene","background","Color","camera","PerspectiveCamera","$refs","threeContainer","offsetWidth","offsetHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","black","add","directionalLight","DirectionalLight","position","set","normalize","roadShape","Shape","moveTo","lineTo","extrudeSettings","steps","depth","bevelEnabled","roadGeometry","ExtrudeGeometry","roadMaterial","MeshLambertMaterial","color","roadMesh","Mesh","rotation","x","Math","PI","y","milestoneGeometry","CylinderGeometry","milestoneMaterial","milestones","i","milestoneMesh","push","z","lookAt","animate","requestAnimationFrame","render","window","addEventListener","aspect","updateProjectionMatrix"],"sources":["src/components/RoadMap.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"container\">\n    <v-row justify=\"center\">\n      <v-col cols=\"12\">\n        <div ref=\"threeContainer\" class=\"three-container\"></div>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n\n      // Set background color to white\n      scene.background = new THREE.Color(0xffffff);\n\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(black, 0.8);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 10, 10).normalize();\n      scene.add(directionalLight);\n\n      // Create Road\n      const roadShape = new THREE.Shape();\n      roadShape.moveTo(-5, -1);\n      roadShape.lineTo(5, -1);\n      roadShape.lineTo(5, 1);\n      roadShape.lineTo(-5, 1);\n      roadShape.lineTo(-5, -1);\n\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.2,\n        bevelEnabled: false,\n      };\n\n      const roadGeometry = new THREE.ExtrudeGeometry(roadShape, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({ color: 0x666666 });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      scene.add(roadMesh);\n\n      // Create Milestones\n      const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n      const milestoneMaterial = new THREE.MeshLambertMaterial({ color: 0xff0000 });\n\n      const milestones = [];\n      for (let i = 0; i < 4; i++) {\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(-4 + i * 3, 0.5, 0);\n        scene.add(milestoneMesh);\n        milestones.push(milestoneMesh);\n      }\n\n      // Camera Position\n      camera.position.z = 7; // Move the camera closer\n      camera.position.y = 2;\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  background-color: black; /* Adjust the container's background to match the scene */\n}\n</style>\n\n<style>\n.three-container {\n  \n  width: 100%;\n  height: 500px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}