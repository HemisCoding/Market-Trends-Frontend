{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Chart from 'chart.js/auto';\nimport anime from 'animejs';\nimport * as THREE from 'three';\n\n// import axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      searchQuery: '',\n      showWidgets: false,\n      searchInitiated: false,\n      showAnimation: true,\n      animatedText: 'Search and analyse any stock...',\n      loading: false,\n      sliderValue: 0,\n      trackColor: 'purple',\n      thumbColor: 'white',\n      chart: null,\n      sentimentValue: 0,\n      scene: null,\n      camera: null,\n      renderer: null,\n      cubes: [],\n      time: 0,\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        rs: 0,\n        gs: 0,\n        bs: 0,\n        rt: 0,\n        gt: 0,\n        bt: 255\n      }\n    };\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.scene.fog = new THREE.Fog(0x000000, 10, 15);\n      this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer({\n        alpha: true\n      }); // Make the background transparent\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      const container = document.querySelector('.three-js-background');\n      container.appendChild(this.renderer.domElement);\n      this.camera.position.set(6, 8, 4);\n      this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n      this.addCubes();\n      this.addLights();\n      this.animate();\n    },\n    addCubes() {\n      for (let x = -6; x <= 6; x++) {\n        for (let z = -6; z <= 6; z++) {\n          const color = Math.random() > 0.75 ? 'blue' : 'black';\n          const material = new THREE.MeshPhongMaterial({\n            color\n          });\n          const geometry = new THREE.BoxGeometry(1, 1, 1);\n          const cube = new THREE.Mesh(geometry, material);\n          cube.position.set(x, 1, z);\n          this.scene.add(cube);\n          this.cubes.push(cube);\n        }\n      }\n    },\n    addLights() {\n      for (let x = -5; x <= 5; x += 5) {\n        for (let z = -5; z <= 5; z += 5) {\n          const light = new THREE.PointLight('white', 1, 7.5);\n          light.position.set(x, 2, z);\n          this.scene.add(light);\n        }\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.updateScene();\n      this.renderer.render(this.scene, this.camera);\n    },\n    updateScene() {\n      // Update the scene based on time or other properties\n      // For example, animate cube positions here\n      this.time += 0.01; // Increment time\n      this.cubes.forEach(cube => {\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n      });\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    onSearch() {\n      this.searchInitiated = true;\n      this.showWidgets = true;\n      this.loading = true;\n      this.showAnimation = false;\n      setTimeout(() => {\n        this.loading = false;\n        this.renderHardcodedChart();\n        this.updateSentiment(80);\n        this.animateToBuySellPercentage(80);\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 1000);\n    },\n    onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"],\n          // Years from 2010 to 2023\n          datasets: [{\n            label: 'Stock Price',\n            data: [120, 150, 180, 130, 160, 190, 220, 250, 210, 230, 200, 240, 270, 300],\n            // Example stock prices\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    },\n    updateSentiment(newVal) {\n      // Function to animate the sentiment value change\n      const animationStep = () => {\n        if (this.sentimentValue < newVal) {\n          this.sentimentValue++;\n          requestAnimationFrame(animationStep);\n        }\n      };\n      requestAnimationFrame(animationStep);\n    },\n    randomValues() {\n      anime({\n        targets: '.square, .circle, .triangle',\n        translateX: function () {\n          return anime.random(-1000, 1000);\n        },\n        translateY: function () {\n          return anime.random(-500, 500);\n        },\n        rotate: function () {\n          return anime.random(0, 360);\n        },\n        scale: function () {\n          return anime.random(.2, 2);\n        },\n        duration: 1000,\n        easing: 'easeInOutQuad',\n        complete: this.randomValues\n      });\n    }\n  },\n  watch: {\n    // searchQuery(newVal, oldVal) {\n    //   if (newVal !== oldVal) {\n    //     this.fetchStockData();\n    //   }\n    // }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.renderHardcodedChart();\n    });\n    this.randomValues();\n    this.initScene();\n    window.addEventListener('resize', this.onWindowResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n};","map":{"version":3,"names":["Chart","anime","THREE","data","searchQuery","showWidgets","searchInitiated","showAnimation","animatedText","loading","sliderValue","trackColor","thumbColor","chart","sentimentValue","scene","camera","renderer","cubes","time","color","r","g","b","rs","gs","bs","rt","gt","bt","methods","initScene","Scene","fog","Fog","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","alpha","setSize","container","document","querySelector","appendChild","domElement","position","set","lookAt","Vector3","addCubes","addLights","animate","x","z","Math","random","material","MeshPhongMaterial","geometry","BoxGeometry","cube","Mesh","add","push","light","PointLight","requestAnimationFrame","updateScene","render","forEach","rotation","y","onWindowResize","aspect","updateProjectionMatrix","onSearch","setTimeout","renderHardcodedChart","updateSentiment","animateToBuySellPercentage","onSliderChange","percentage","ctx","getElementById","getContext","destroy","type","labels","datasets","label","borderColor","tension","options","scales","beginAtZero","responsive","maintainAspectRatio","newVal","animationStep","randomValues","targets","translateX","translateY","rotate","scale","duration","easing","complete","watch","mounted","$nextTick","addEventListener","beforeDestroy","removeEventListener"],"sources":["src/components/FinancialAnalyser.vue"],"sourcesContent":["<template>\n    <v-app>\n      <div class=\"three-js-background\"></div> <!-- Container for THREE.js -->\n\n      <v-container fluid class=\"container\">\n        <!-- <div v-if=\"showAnimation\">\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n        </div> -->\n        <v-row align=\"center\">\n            <v-col cols=\"auto\" class=\"logo-container\">\n                <img src=\"@/assets/Success.png\" height=\"100\"> \n            </v-col>\n            <v-col cols=\"auto\">\n                <span class=\"tool-name\">StockSift</span>\n            </v-col>\n        </v-row>\n        <v-row justify=\"center\" align=\"center\" class=\"text-center\">\n                <v-col cols=\"12\">\n                <div class=\"typewriter\">\n                    <h1>{{ animatedText }}</h1>\n                </div>\n                <div>\n                    <v-col cols=\"12\">\n                        <v-card class=\"widget-format1\">\n                          <canvas id=\"stockChart\" width=\"400\" height=\"200\" v-if=\"showWidgets\"></canvas>\n                        </v-card>\n                    </v-col>\n                </div>\n                <div>\n                </div>\n                    <div class=\"second-row\">\n                    <v-row justify=\"center\">\n                      <v-col cols=\"12\" sm=\"7\" md=\"10\" lg=\"6\">\n                          <v-text-field\n                              dark\n                              height=\"30\"\n                              v-model=\"searchQuery\"\n                              :class=\"{ 'search-field': searchInitiated }\"\n                              label=\"Search by Ticker Symbol\"\n                              append-icon=\"mdi-magnify\"\n                              @click:append=\"onSearch\"\n                              @keyup.enter=\"onSearch\"\n                              :loading=\"loading\"\n                              outlined\n                              dense\n                              class=\"text-field white-text\"\n                          ></v-text-field>\n                      </v-col>\n                          <div class=\"slider-container bg-surface-variant rounded-pill\" v-if=\"showWidgets\">\n                          <v-progress-linear\n                            class=\"buy-rate bg-surface-variant rounded-pill\"\n                            v-model=\"sliderValue\"\n                            height=\"40\"\n                            color=\"teal\"\n                          >\n                            <strong>{{ Math.ceil(sliderValue) }}% Buying rate</strong>\n                          </v-progress-linear>\n                          </div>\n                    </v-row>\n\n                </div>\n                </v-col>\n            </v-row>\n\n        <!-- Container pentru widget-uri, afișat doar după căutare -->\n        <v-row v-if=\"showWidgets\">\n          <v-col cols=\"12\" md=\"6\" lg=\"4\" >\n            <v-card class=\"widget-format\">\n              <v-card-title>Widget</v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-progress-circular\n                  :size=\"300\"\n                  :width=\"40\"\n                  :value=\"sentimentValue\"\n                  color=\"teal\"\n                  rotate=\"-90\"\n                >\n                  {{ sentimentValue }}%\n              </v-progress-circular>\n              <v-card-title>Sentiment Analysis</v-card-title>\n              <!-- <v-card-text>News from x-date</v-card-text> -->\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-card-title></v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-app>\n  </template>\n  \n  <script>\nimport Chart from 'chart.js/auto';\nimport anime from 'animejs';\nimport * as THREE from 'three';\n\n// import axios from 'axios';\n\n  export default {\n    data() {\n      return {\n        searchQuery: '',\n        showWidgets: false,\n        searchInitiated: false,\n        showAnimation: true,\n        animatedText: 'Search and analyse any stock...',\n        loading: false,\n        sliderValue: 0,\n        trackColor: 'purple',\n        thumbColor: 'white',\n        chart: null,\n        sentimentValue: 0,\n        scene: null,\n      camera: null,\n      renderer: null,\n      cubes: [],\n      time: 0,\n      color: {\n        r: 0, g: 0, b: 255, rs: 0, gs: 0, bs: 0, rt: 0, gt: 0, bt: 255\n      }\n      };\n    },\n    methods: {\n\n      initScene() {\n  this.scene = new THREE.Scene();\n  this.scene.fog = new THREE.Fog(0x000000, 10, 15);\n  this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n  this.renderer = new THREE.WebGLRenderer({ alpha: true }); // Make the background transparent\n  this.renderer.setSize(window.innerWidth, window.innerHeight);\n  const container = document.querySelector('.three-js-background');\n  container.appendChild(this.renderer.domElement);\n  this.camera.position.set(6, 8, 4);\n  this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n  this.addCubes();\n  this.addLights();\n  this.animate();\n},\n\n    addCubes() {\n      for (let x = -6; x <= 6; x++) {\n        for (let z = -6; z <= 6; z++) {\n          const color = Math.random() > 0.75 ? 'blue' : 'black';\n          const material = new THREE.MeshPhongMaterial({ color });\n          const geometry = new THREE.BoxGeometry(1, 1, 1);\n          const cube = new THREE.Mesh(geometry, material);\n          cube.position.set(x, 1, z);\n          this.scene.add(cube);\n          this.cubes.push(cube);\n        }\n      }\n    },\n    addLights() {\n      for (let x = -5; x <= 5; x += 5) {\n        for (let z = -5; z <= 5; z += 5) {\n          const light = new THREE.PointLight('white', 1, 7.5);\n          light.position.set(x, 2, z);\n          this.scene.add(light);\n        }\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.updateScene();\n      this.renderer.render(this.scene, this.camera);\n    },\n    updateScene() {\n    // Update the scene based on time or other properties\n    // For example, animate cube positions here\n    this.time += 0.01; // Increment time\n    this.cubes.forEach(cube => {\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n    });\n  },\n    onWindowResize() {\n  this.camera.aspect = window.innerWidth / window.innerHeight;\n  this.camera.updateProjectionMatrix();\n  this.renderer.setSize(window.innerWidth, window.innerHeight);\n},\n      \n      \n      onSearch() {\n        this.searchInitiated = true;\n        this.showWidgets = true;\n        this.loading = true;\n        this.showAnimation = false;\n      setTimeout(() => {\n        this.loading = false;\n        this.renderHardcodedChart();\n        this.updateSentiment(80);\n        this.animateToBuySellPercentage(80);\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 1000);\n      },\n\n      onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"], // Years from 2010 to 2023\n          datasets: [{\n            label: 'Stock Price',\n            data: [120, 150, 180, 130, 160, 190, 220, 250, 210, 230, 200, 240, 270, 300], // Example stock prices\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    },\n    updateSentiment(newVal) {\n      // Function to animate the sentiment value change\n      const animationStep = () => {\n        if (this.sentimentValue < newVal) {\n          this.sentimentValue++;\n          requestAnimationFrame(animationStep);\n        }\n      };\n      requestAnimationFrame(animationStep);\n    },\n\n    randomValues() {\n  anime({\n    targets: '.square, .circle, .triangle',\n    translateX: function() {\n      return anime.random(-1000, 1000);\n    },\n\t\ttranslateY: function() {\n      return anime.random(-500, 500);\n    },\n\t\trotate: function() {\n\t\t\treturn anime.random(0, 360);\n\t\t},\n\t\tscale: function() {\n\t\t\treturn anime.random(.2, 2);\n\t\t},\n    duration: 1000,\n\t\teasing: 'easeInOutQuad',\n    complete: this.randomValues,\n\t});\n}\n\n    },\n\n    watch: {\n    // searchQuery(newVal, oldVal) {\n    //   if (newVal !== oldVal) {\n    //     this.fetchStockData();\n    //   }\n    // }\n  },\n    mounted() {\n  this.$nextTick(() => {\n    this.renderHardcodedChart();\n  });\n  this.randomValues();\n  this.initScene();\n  window.addEventListener('resize', this.onWindowResize);\n\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n  };\n  </script>\n  \n  <style scoped>\n  \n.container {\n  background: rgb(0,0,0);\nbackground: linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n    height: 100%;\n}\n\n.typewriter h1 {\n    color: #FFFFFF; \n  text-shadow: \n    1px 1px 0px #ddd, \n    2px 2px 0px #d4d4d4, \n    2px 2px 0px #ccc; \n  font-size: 2.5em; /* Adjust the size of the text */\n  font-weight: bold;\n  overflow: hidden;\n  border-right: .15em solid black;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: .15em;\n  font-family: Courier, monospace;\n\n  animation: typing 7s steps(40, end), blink-caret .75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent }\n  50% { border-color: black }\n}\n\n  \n#app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n  }\n  \nheader {\n    background-color: #42b983;\n    color: white;\n    padding: 10px;\n  }\n  \nmain {\n    margin: 20px;\n  }\n  \nfooter {\n    color: #586069;\n    padding: 10px;\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    background: rgb(2,0,36);\n  }\n\n.widget-format{\n    background-color: transparent;\n    color: white;\n    margin: 1vh;\n    padding: 3%;\n    border: 1px solid linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n}\n\n.widget-format1{\n    background-color: transparent;\n    color: white;\n    margin: 1vh;\n    border: 1px solid linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n    padding: 3%;\n}\n\n.slider-container {\n  width: 45vw;\n  padding: 20px;\n  background-image: linear-gradient(to bottom, #2c3e50, #2d3141, #292632, #221c23, #181316, #120e10, #0a0708, #000000, #000000, #000000, #000000, #000000);\n}\n\n.second-row {\n    margin-top: 3vh;\n    margin-left: 1vw;\n    margin-right: 1vw;\n}\n\n.logo-container {\n    padding-right: 0vw;\n    padding-left: 1vw;\n}\n\n.tool-name {\n  font-size: 1.2rem; /* Adaptează dimensiunea fontului după necesități */\n  font-weight: bold;\n  font-size: 3vh;\n  color: #FFFFFF; /* Schimbă culoarea dacă este necesar */\n}\n\n.text-field {\n  margin-top: 1.3vh;\n  margin-left: 0.5vw;\n    /* margin-right: 3vw; */\n  color: white;\n}\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbody {\n\tbackground: #222222;\n\toverflow: hidden;\n}\n\n.square {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: linear-gradient(#303030, #757575);\n\tz-index: 2;\n}\n\n.circle {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: #1cd99d;\n\tborder-radius: 50%;\n}\n\n.triangle {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: #f5f5f5;\n\tclip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n\t-webkit-clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n}\n\n@keyframes slideToLeft {\n  0% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(-4%); /* Adjust this value based on the desired final position */\n  }\n}\n\n.search-field {\n  position: relative; \n  animation: slideToLeft 1s forwards;\n}\n\n.three-js-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  z-index: 1;\n}\n\n  </style>\n  \n\n\n  // fetchStockData() {\n    //   axios.get('api/stock_prices?ticker=' + this.searchQuery)\n    //     .then(response => {\n    //       const data = response.data; \n    //       this.renderChart(data);\n    //     })\n    //     .catch(error => console.error(\"Error fetching stock data:\", error));\n    // },\n    // renderChart(stockData) {\n    //   const ctx = document.getElementById('stockChart').getContext('2d');\n    //   if (this.chart) {\n    //     this.chart.destroy(); // Destroy the existing chart instance if it exists\n    //   }\n    //   this.chart = new Chart(ctx, {\n    //     type: 'line',\n    //     data: {\n    //       labels: stockData.dates, // array of dates\n    //       datasets: [{\n    //         label: 'Stock Price',\n    //         data: stockData.prices, // array of prices\n    //         borderColor: 'rgb(75, 192, 192)',\n    //         tension: 0.1\n    //       }]\n    //     },\n    //     options: {\n    //       scales: {\n    //         y: {\n    //           beginAtZero: false\n    //         }\n    //       }\n    //     }\n    //   });\n    // },\n\n\n    //hardcoded one"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}