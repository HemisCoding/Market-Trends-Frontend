{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport anime from 'animejs';\n// import VueApexCharts from 'vue-apexcharts';\nimport * as THREE from 'three';\nimport axios from 'axios';\n// import { cookie } from 'server/reply';\nimport Cookies from 'js-cookie';\n// import { CatmullRomCurve3 } from 'three';\n\nexport default {\n  //   components: {\n  //   apexchart: VueApexCharts\n  // },\n\n  data() {\n    return {\n      raycaster: new THREE.Raycaster(),\n      mouse: new THREE.Vector2(),\n      hoveredObject: null,\n      searchQuery: '',\n      sentiment_score: null,\n      showWidgets: false,\n      searchInitiated: false,\n      showAnimation: true,\n      years: [],\n      prices: [],\n      loadings: false,\n      animatedText: 'Search and analyse any stock...',\n      loading: false,\n      sliderValue: 0,\n      trackColor: 'purple',\n      thumbColor: 'white',\n      chart: null,\n      sentimentValue: 0,\n      scene: null,\n      // Single declaration\n      camera: null,\n      // Single declaration\n      renderer: null,\n      // Single declaration\n      curve: null,\n      chartOptions: {\n        chart: {\n          type: 'bar'\n        },\n        series: [{\n          name: 'sales',\n          data: [30, 40, 45, 50, 49, 60, 70, 91, 125]\n        }],\n        xaxis: {\n          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n        }\n      },\n      cubes: [],\n      time: 0,\n      frogX: 0,\n      frogY: 0,\n      frogImage: '@/assets/frog-image.svg',\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        rs: 0,\n        gs: 0,\n        bs: 0,\n        rt: 0,\n        gt: 0,\n        bt: 255\n      }\n    };\n  },\n  methods: {\n    onMouseMove(event) {\n      event.preventDefault();\n\n      // Update the mouse position\n      this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // Update the picking ray with the camera and mouse position\n      this.raycaster.setFromCamera(this.mouse, this.camera);\n\n      // Calculate objects intersecting the picking ray\n      const intersects = this.raycaster.intersectObjects(this.scene.children.filter(child => child.isPoint));\n      if (intersects.length > 0) {\n        if (this.hoveredObject != intersects[0].object) {\n          // Reset old hovered object\n          if (this.hoveredObject) {\n            this.hoveredObject.material.emissive.setHex(this.hoveredObject.currentHex);\n          }\n\n          // Store reference to new hovered object\n          this.hoveredObject = intersects[0].object;\n          this.hoveredObject.currentHex = this.hoveredObject.material.emissive.getHex();\n          this.hoveredObject.material.emissive.setHex(0xff0000); // Change color or apply other visual changes\n        }\n      } else {\n        // Reset when no object is hovered\n        if (this.hoveredObject) {\n          this.hoveredObject.material.emissive.setHex(this.hoveredObject.currentHex);\n          this.hoveredObject = null;\n        }\n      }\n    },\n    initThree() {\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.$refs.threeJsContainer.appendChild(this.renderer.domElement);\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.camera.position.set(0, 10, 20);\n      this.camera.lookAt(0, 0, 0);\n      const light = new THREE.AmbientLight(0x404040, 2);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(0, 1, 1);\n      this.scene.add(light, directionalLight);\n      this.createRoad();\n      this.animate();\n    },\n    createRoad() {\n      const points = [new THREE.Vector3(-10, 0, 10), new THREE.Vector3(-5, 0, 5), new THREE.Vector3(0, 0, 0), new THREE.Vector3(5, 0, -5), new THREE.Vector3(10, 0, -10)];\n      this.curve = new THREE.CatmullRomCurve3(points);\n      const geometry = new THREE.TubeGeometry(this.curve, 20, 0.2, 8, false);\n      const material = new THREE.MeshLambertMaterial({\n        color: 0x156289\n      });\n      const mesh = new THREE.Mesh(geometry, material);\n      this.scene.add(mesh);\n      this.addMarkers(points);\n    },\n    addMarkers(points) {\n      const sphereGeometry = new THREE.SphereGeometry(0.5, 16, 16);\n      const sphereMaterial = new THREE.MeshBasicMaterial({\n        color: 0xff0000\n      });\n      points.forEach(point => {\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphere.position.copy(point);\n        sphere.isPoint = true; // Add a flag to identify hoverable objects\n        this.scene.add(sphere);\n      });\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.renderer.render(this.scene, this.camera);\n      this.updateScene();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    getNews() {\n      this.loadings = true;\n      this.getGraph();\n      this.loading = true;\n      console.log('getnews post', this.searchQuery);\n      // axios.post('http://127.0.0.1:8000/trends/stocknews/', {\n      //   ticker: this.searchQuery\n      // })\n      let formData = new FormData();\n      formData.append('ticker', this.searchQuery);\n      const csrfToken = Cookies.get('csrftoken');\n      axios({\n        method: 'POST',\n        url: 'http://127.0.0.1:8000/trends/stocknews/',\n        data: formData,\n        headers: {\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'multipart/form-data'\n        },\n        withCredentials: true\n      }).then(response => {\n        this.sentiment_score = response.data.sentiment_score;\n        console.log('sentiment', this.sentiment_score);\n        console.log('Reponse data: ', response.data);\n        this.onSearch();\n        this.loadings = false;\n      }).catch(error => {\n        console.log('Error here: ', error);\n      });\n    },\n    getGraph() {\n      axios.get(`http://127.0.0.1:8000/trends/averageprices/${this.searchQuery}`).then(response => {\n        console.log('sunt in getGraph');\n        console.log(response.data);\n        this.years = Object.keys(response.data).map(year => parseInt(year));\n        this.prices = Object.values(response.data).map(price => parseInt(price));\n        console.log('years', this.years);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    addLights() {\n      for (let x = -5; x <= 5; x += 5) {\n        for (let z = -5; z <= 5; z += 5) {\n          const light = new THREE.PointLight('white', 1, 7.5);\n          light.position.set(x, 2, z);\n          this.scene.add(light);\n        }\n      }\n    },\n    // animate() {\n    //   requestAnimationFrame(this.animate);\n    // this.updateScene();\n    // this.renderer.render(this.scene, this.camera);\n    // },\n    updateScene() {\n      // Update the scene based on time or other properties\n      // For example, animate cube positions here\n      this.time += 0.01; // Increment time\n      this.cubes.forEach(cube => {\n        cube.rotation.x += 0.02;\n        cube.rotation.y += 0.01;\n      });\n    },\n    //     onWindowResize() {\n    //   this.camera.aspect = window.innerWidth / window.innerHeight;\n    //   this.camera.updateProjectionMatrix();\n    //   this.renderer.setSize(window.innerWidth, window.innerHeight);\n    // },\n\n    onSearch() {\n      // this.getNews();\n      this.searchInitiated = true;\n      this.showWidgets = true;\n      this.loading = true;\n      this.showAnimation = false;\n      setTimeout(() => {\n        this.loading = false;\n        this.renderHardcodedChart();\n        this.updateSentiment(80);\n        this.animateToBuySellPercentage(80);\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 1000);\n    },\n    onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: this.years,\n          datasets: [{\n            label: 'Stock Price',\n            data: this.prices,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    },\n    updateSentiment(newVal) {\n      // Function to animate the sentiment value change\n      const animationStep = () => {\n        if (this.sentimentValue < newVal) {\n          this.sentimentValue++;\n          requestAnimationFrame(animationStep);\n        }\n      };\n      requestAnimationFrame(animationStep);\n    },\n    randomValues() {\n      anime({\n        targets: '.square, .circle, .triangle',\n        translateX: function () {\n          return anime.random(-1000, 1000);\n        },\n        translateY: function () {\n          return anime.random(-500, 500);\n        },\n        rotate: function () {\n          return anime.random(0, 360);\n        },\n        scale: function () {\n          return anime.random(.2, 2);\n        },\n        duration: 1000,\n        easing: 'easeInOutQuad',\n        complete: this.randomValues\n      });\n    }\n  },\n  watch: {\n    // searchQuery(newVal, oldVal) {\n    //   if (newVal !== oldVal) {\n    //     this.fetchStockData();\n    //   }\n    // }\n  },\n  mounted() {\n    this.initThree();\n    window.addEventListener('resize', this.onWindowResize);\n    this.$refs.threeJsContainer.addEventListener('mousemove', this.onMouseMove);\n    this.$nextTick(() => {\n      this.renderHardcodedChart();\n    });\n    this.randomValues();\n    // window.addEventListener('resize', this.onWindowResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.onWindowResize);\n    this.renderer.dispose();\n    this.scene.dispose(); // Ensure cleanup for all Three.js objects\n  }\n};","map":{"version":3,"names":["Chart","anime","THREE","axios","Cookies","data","raycaster","Raycaster","mouse","Vector2","hoveredObject","searchQuery","sentiment_score","showWidgets","searchInitiated","showAnimation","years","prices","loadings","animatedText","loading","sliderValue","trackColor","thumbColor","chart","sentimentValue","scene","camera","renderer","curve","chartOptions","type","series","name","xaxis","categories","cubes","time","frogX","frogY","frogImage","color","r","g","b","rs","gs","bs","rt","gt","bt","methods","onMouseMove","event","preventDefault","x","clientX","window","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObjects","children","filter","child","isPoint","length","object","material","emissive","setHex","currentHex","getHex","initThree","WebGLRenderer","antialias","alpha","setSize","$refs","threeJsContainer","appendChild","domElement","Scene","PerspectiveCamera","position","set","lookAt","light","AmbientLight","directionalLight","DirectionalLight","add","createRoad","animate","points","Vector3","CatmullRomCurve3","geometry","TubeGeometry","MeshLambertMaterial","mesh","Mesh","addMarkers","sphereGeometry","SphereGeometry","sphereMaterial","MeshBasicMaterial","forEach","point","sphere","copy","requestAnimationFrame","render","updateScene","onWindowResize","aspect","updateProjectionMatrix","getNews","getGraph","console","log","formData","FormData","append","csrfToken","get","method","url","headers","withCredentials","then","response","onSearch","catch","error","Object","keys","map","year","parseInt","values","price","addLights","z","PointLight","cube","rotation","setTimeout","renderHardcodedChart","updateSentiment","animateToBuySellPercentage","onSliderChange","percentage","ctx","document","getElementById","getContext","destroy","labels","datasets","label","borderColor","tension","options","scales","beginAtZero","responsive","maintainAspectRatio","newVal","animationStep","randomValues","targets","translateX","random","translateY","rotate","scale","duration","easing","complete","watch","mounted","addEventListener","$nextTick","beforeDestroy","removeEventListener","dispose"],"sources":["src/components/FinancialAnalyser.vue"],"sourcesContent":["<template>\n    <v-app>\n\n      <v-container fluid class=\"container\">\n        <!-- <div ref=\"threeJsContainer\" class=\"three-js-background\"></div>  -->\n        <div v-if=\"showAnimation\">\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n          <div class=\"square\"></div>\n\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n          <div class=\"circle\"></div>\n\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n          <div class=\"triangle\"></div>\n        </div>\n        <div v-if=\"loadings\" class=\"loader-overlay\">\n          <div class=\"loader-circle\"></div>\n        </div>\n        <div ref=\"threeJsContainer\" class=\"three-js-background\"></div> \n\n        <v-row align=\"center\">\n          <!-- <div v-if='showAnimation' class=\"three-js-background\"></div> Container for THREE.js -->\n\n            <v-col cols=\"auto\" class=\"logo-container\">\n                <img src=\"@/assets/Success.png\" height=\"100\"> \n            </v-col>\n            <v-col cols=\"auto\">\n                <span class=\"tool-name\">StockSift</span>\n            </v-col>\n        </v-row>\n        <v-row justify=\"center\" align=\"center\" class=\"text-center\">\n                <v-col cols=\"12\">\n                <div class=\"typewriter\">\n                    <h1>{{ animatedText }}</h1>\n                </div>\n                <div>\n                    <v-col cols=\"12\">\n                        <v-card class=\"widget-format1\">\n                          <canvas id=\"stockChart\" width=\"400\" height=\"200\" v-if=\"showWidgets\"></canvas>\n                        </v-card>\n                    </v-col>\n                </div>\n                <div>\n                </div>\n                    <div class=\"second-row\">\n                    <v-row justify=\"center\">\n                      <v-col cols=\"12\" sm=\"7\" md=\"10\" lg=\"6\">\n                          <v-text-field\n                              dark\n                              height=\"30\"\n                              v-model=\"searchQuery\"\n                              :class=\"{ 'search-field': searchInitiated }\"\n                              label=\"Search by Ticker Symbol\"\n                              append-icon=\"mdi-magnify\"\n                              @click:append=\"getNews()\"\n                              @keyup.enter=\"getNews()\"\n                              :loading=\"loadings\"\n                              outlined\n                              dense\n                              class=\"text-field white-text\"\n                          ></v-text-field>\n                      </v-col>\n                          <div class=\"slider-container bg-surface-variant rounded-pill\" v-if=\"showWidgets\">\n                          <v-progress-linear\n                            class=\"buy-rate bg-surface-variant rounded-pill\"\n                            v-model=\"sliderValue\"\n                            height=\"40\"\n                            color=\"teal\"\n                          >\n                            <strong>{{ Math.ceil(sliderValue) }}% Buying rate</strong>\n                          </v-progress-linear>\n                          </div>\n                    </v-row>\n\n                </div>\n                </v-col>\n            </v-row>\n\n        <!-- Container pentru widget-uri, afișat doar după căutare -->\n        <v-row v-if=\"showWidgets\">\n          <v-col cols=\"12\" md=\"6\" lg=\"4\" >\n            <v-card class=\"widget-format\">\n              <v-card-title>Widget</v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-progress-circular\n                  :size=\"300\"\n                  :width=\"40\"\n                  :value=\"this.sentiment_score\"\n                  color=\"teal\"\n                  rotate=\"-90\"\n                >\n                  {{ this.sentiment_score }}%\n              </v-progress-circular>\n              <v-card-title>Sentiment Analysis</v-card-title>\n              <!-- <v-card-text>News from x-date</v-card-text> -->\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-card-title></v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-app>\n  </template>\n  \n  <script>\nimport Chart from 'chart.js/auto';\nimport anime from 'animejs';\n// import VueApexCharts from 'vue-apexcharts';\nimport * as THREE from 'three';\nimport axios from 'axios';\n// import { cookie } from 'server/reply';\nimport Cookies from 'js-cookie';\n// import { CatmullRomCurve3 } from 'three';\n\n\n  export default {\n  //   components: {\n  //   apexchart: VueApexCharts\n  // },\n\n    data() {\n      return {\n        raycaster: new THREE.Raycaster(),\n        mouse: new THREE.Vector2(),\n        hoveredObject: null,\n            searchQuery: '',\n            sentiment_score: null,\n            showWidgets: false,\n            searchInitiated: false,\n            showAnimation: true,\n            years: [],\n            prices: [],\n            loadings: false,\n            animatedText: 'Search and analyse any stock...',\n            loading: false,\n            sliderValue: 0,\n            trackColor: 'purple',\n            thumbColor: 'white',\n            chart: null,\n            sentimentValue: 0,\n            scene: null, // Single declaration\n            camera: null, // Single declaration\n            renderer: null, // Single declaration\n            curve: null,\n            chartOptions: {\n                chart: { type: 'bar' },\n                series: [{ name: 'sales', data: [30, 40, 45, 50, 49, 60, 70, 91, 125] }],\n                xaxis: { categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'] }\n            },\n            cubes: [],\n            time: 0,\n            frogX: 0,\n            frogY: 0,\n            frogImage: '@/assets/frog-image.svg',\n            color: { r: 0, g: 0, b: 255, rs: 0, gs: 0, bs: 0, rt: 0, gt: 0, bt: 255 }\n        };\n    },\n    methods: {\n      \n      onMouseMove(event) {\n    event.preventDefault();\n\n    // Update the mouse position\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Update the picking ray with the camera and mouse position\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    // Calculate objects intersecting the picking ray\n    const intersects = this.raycaster.intersectObjects(this.scene.children.filter(child => child.isPoint));\n\n    if (intersects.length > 0) {\n      if (this.hoveredObject != intersects[0].object) {\n        // Reset old hovered object\n        if (this.hoveredObject) {\n          this.hoveredObject.material.emissive.setHex(this.hoveredObject.currentHex);\n        }\n\n        // Store reference to new hovered object\n        this.hoveredObject = intersects[0].object;\n        this.hoveredObject.currentHex = this.hoveredObject.material.emissive.getHex();\n        this.hoveredObject.material.emissive.setHex(0xff0000); // Change color or apply other visual changes\n      }\n    } else {\n      // Reset when no object is hovered\n      if (this.hoveredObject) {\n        this.hoveredObject.material.emissive.setHex(this.hoveredObject.currentHex);\n        this.hoveredObject = null;\n      }\n    }\n  },\n\n      initThree() {\n            this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n            this.$refs.threeJsContainer.appendChild(this.renderer.domElement);\n\n            this.scene = new THREE.Scene();\n            this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n            this.camera.position.set(0, 10, 20);\n            this.camera.lookAt(0, 0, 0);\n\n            const light = new THREE.AmbientLight(0x404040, 2);\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n            directionalLight.position.set(0, 1, 1);\n            this.scene.add(light, directionalLight);\n\n            this.createRoad();\n            this.animate();\n        },\n        createRoad() {\n            const points = [\n                new THREE.Vector3(-10, 0, 10),\n                new THREE.Vector3(-5, 0, 5),\n                new THREE.Vector3(0, 0, 0),\n                new THREE.Vector3(5, 0, -5),\n                new THREE.Vector3(10, 0, -10)\n            ];\n            this.curve = new THREE.CatmullRomCurve3(points);\n            const geometry = new THREE.TubeGeometry(this.curve, 20, 0.2, 8, false);\n            const material = new THREE.MeshLambertMaterial({ color: 0x156289 });\n            const mesh = new THREE.Mesh(geometry, material);\n            this.scene.add(mesh);\n            this.addMarkers(points);\n        },\n        addMarkers(points) {\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 16, 16);\n  const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n  points.forEach(point => {\n    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n    sphere.position.copy(point);\n    sphere.isPoint = true;  // Add a flag to identify hoverable objects\n    this.scene.add(sphere);\n  });\n        },\n        animate() {\n            requestAnimationFrame(this.animate);\n            this.renderer.render(this.scene, this.camera);\n            this.updateScene();\n        },\n        onWindowResize() {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        },\n\n\n      getNews(){\n        this.loadings = true;\n        this.getGraph();\n        this.loading = true;\n        console.log('getnews post', this.searchQuery)\n        // axios.post('http://127.0.0.1:8000/trends/stocknews/', {\n        //   ticker: this.searchQuery\n        // })\n        let formData = new FormData();\n        formData.append('ticker', this.searchQuery)\n        const csrfToken = Cookies.get('csrftoken')\n        axios({\n          method: 'POST',\n          url: 'http://127.0.0.1:8000/trends/stocknews/',\n          data: formData,\n          headers: {\n            'X-CSRFToken': csrfToken,\n            'Content-Type': 'multipart/form-data'\n          },\n          withCredentials: true,\n        })\n        .then(response => {\n          this.sentiment_score = response.data.sentiment_score;\n          console.log('sentiment', this.sentiment_score)\n          console.log('Reponse data: ', response.data)\n          this.onSearch();\n          this.loadings = false;\n\n        })\n        .catch(error => {\n          console.log('Error here: ', error)\n        })\n      },\n      getGraph() {\n        axios.get(`http://127.0.0.1:8000/trends/averageprices/${this.searchQuery}`) \n          .then(response => {\n            console.log('sunt in getGraph');\n            console.log(response.data);\n            this.years = Object.keys(response.data).map(year => parseInt(year));\n            this.prices = Object.values(response.data).map(price => parseInt(price))\n            console.log('years', this.years)\n\n          })\n          .catch(error => {\n            console.log(error)\n          })\n      },\n    addLights() {\n      for (let x = -5; x <= 5; x += 5) {\n        for (let z = -5; z <= 5; z += 5) {\n          const light = new THREE.PointLight('white', 1, 7.5);\n          light.position.set(x, 2, z);\n          this.scene.add(light);\n        }\n      }\n    },\n    // animate() {\n    //   requestAnimationFrame(this.animate);\n    // this.updateScene();\n    // this.renderer.render(this.scene, this.camera);\n    // },\n    updateScene() {\n    // Update the scene based on time or other properties\n    // For example, animate cube positions here\n    this.time += 0.01; // Increment time\n    this.cubes.forEach(cube => {\n      cube.rotation.x += 0.02;\n      cube.rotation.y += 0.01;\n\n    });\n  },\n//     onWindowResize() {\n//   this.camera.aspect = window.innerWidth / window.innerHeight;\n//   this.camera.updateProjectionMatrix();\n//   this.renderer.setSize(window.innerWidth, window.innerHeight);\n// },\n      \n      \n      onSearch() {\n        // this.getNews();\n        this.searchInitiated = true;\n        this.showWidgets = true;\n        this.loading = true;\n        this.showAnimation = false;\n      setTimeout(() => {\n        this.loading = false;\n        this.renderHardcodedChart();\n        this.updateSentiment(80);\n        this.animateToBuySellPercentage(80);\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 1000);\n      },\n\n      onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: this.years,\n          datasets: [{\n            label: 'Stock Price',\n            data: this.prices,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    },\n    updateSentiment(newVal) {\n      // Function to animate the sentiment value change\n      const animationStep = () => {\n        if (this.sentimentValue < newVal) {\n          this.sentimentValue++;\n          requestAnimationFrame(animationStep);\n        }\n      };\n      requestAnimationFrame(animationStep);\n    },\n\n    randomValues() {\n  anime({\n    targets: '.square, .circle, .triangle',\n    translateX: function() {\n      return anime.random(-1000, 1000);\n    },\n\t\ttranslateY: function() {\n      return anime.random(-500, 500);\n    },\n\t\trotate: function() {\n\t\t\treturn anime.random(0, 360);\n\t\t},\n\t\tscale: function() {\n\t\t\treturn anime.random(.2, 2);\n\t\t},\n    duration: 1000,\n\t\teasing: 'easeInOutQuad',\n    complete: this.randomValues,\n\t});\n}\n\n    },\n\n    watch: {\n    // searchQuery(newVal, oldVal) {\n    //   if (newVal !== oldVal) {\n    //     this.fetchStockData();\n    //   }\n    // }\n  },\n    mounted() {\n      this.initThree();\n      window.addEventListener('resize', this.onWindowResize);\n      this.$refs.threeJsContainer.addEventListener('mousemove', this.onMouseMove);\n\n  this.$nextTick(() => {\n    this.renderHardcodedChart();\n  });\n  this.randomValues();\n  // window.addEventListener('resize', this.onWindowResize);\n\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.onWindowResize);\n        this.renderer.dispose();\n        this.scene.dispose(); // Ensure cleanup for all Three.js objects\n  }\n  };\n  </script>\n  \n  <style scoped>\n\n.loader-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 9999;\n}\n\n.loader-circle {\n  border: 5px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 5px solid #3498db;\n  width: 50px;\n  height: 50px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n  \n.container {\n  background: rgb(0,0,0);\nbackground: linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n    height: 100%;\n}\n\n.typewriter h1 {\n    color: #FFFFFF; \n  text-shadow: \n    1px 1px 0px #ddd, \n    2px 2px 0px #d4d4d4, \n    2px 2px 0px #ccc; \n  font-size: 2.5em; /* Adjust the size of the text */\n  font-weight: bold;\n  overflow: hidden;\n  border-right: .15em solid black;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: .15em;\n  font-family: Courier, monospace;\n  animation: typing 7s steps(40, end), blink-caret .75s step-end infinite;\n  z-index: 9999; /* Adjust the value as needed */\n\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent }\n  50% { border-color: black }\n}\n\n  \n#app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n  }\n  \nheader {\n    background-color: #42b983;\n    color: white;\n    padding: 10px;\n  }\n  \nmain {\n    margin: 20px;\n  }\n  \nfooter {\n    color: #586069;\n    padding: 10px;\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    background: rgb(2,0,36);\n  }\n\n.widget-format{\n    background-color: transparent;\n    color: white;\n    margin: 1vh;\n    padding: 3%;\n    border: 1px solid linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n}\n\n.widget-format1{\n    background-color: transparent;\n    color: white;\n    margin: 1vh;\n    border: 1px solid linear-gradient(62deg, rgba(0,0,0,1) 0%, rgba(19,15,64,1) 71%);\n    padding: 3%;\n}\n\n.slider-container {\n  width: 45vw;\n  padding: 20px;\n  background-image: linear-gradient(to bottom, #2c3e50, #2d3141, #292632, #221c23, #181316, #120e10, #0a0708, #000000, #000000, #000000, #000000, #000000);\n}\n\n.second-row {\n    margin-top: 3vh;\n    margin-left: 1vw;\n    margin-right: 1vw;\n}\n\n.logo-container {\n    padding-right: 0vw;\n    padding-left: 1vw;\n}\n\n.tool-name {\n  font-size: 1.2rem; /* Adaptează dimensiunea fontului după necesități */\n  font-weight: bold;\n  font-size: 3vh;\n  color: #FFFFFF; /* Schimbă culoarea dacă este necesar */\n}\n\n.text-field {\n  margin-top: 1.3vh;\n  margin-left: 0.5vw;\n    /* margin-right: 3vw; */\n  color: white;\n}\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbody {\n\tbackground: #222222;\n\toverflow: hidden;\n}\n\n.square {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: linear-gradient(#303030, #757575);\n\tz-index: 3;\n}\n\n.circle {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: #1cd99d;\n\tborder-radius: 50%;\n}\n\n.triangle {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 50px;\n\theight: 50px;\n\tbackground: #f5f5f5;\n\tclip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n\t-webkit-clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n}\n\n@keyframes slideToLeft {\n  0% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(-4%); /* Adjust this value based on the desired final position */\n  }\n}\n\n.search-field {\n  position: relative; \n  animation: slideToLeft 1s forwards;\n}\n\n.three-js-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  background-color: transparent !important;\n  margin-top: 20vh;\n}\n\n.loader-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 100; /* Ensure it covers other UI elements when active */\n}\n\n\n\n\n\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}