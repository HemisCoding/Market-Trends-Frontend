{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Add GridHelper\n      const gridHelper = new THREE.GridHelper(10, 10);\n      scene.add(gridHelper);\n\n      // Add AxesHelper\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n\n      // Add a Simple Cube\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n\n      // Camera Position\n      camera.position.z = 5;\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","initThreeJS","methods","scene","Scene","camera","PerspectiveCamera","$refs","threeContainer","offsetWidth","offsetHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","gridHelper","GridHelper","add","axesHelper","AxesHelper","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","animate","requestAnimationFrame","rotation","x","y","render","window","addEventListener","aspect","updateProjectionMatrix"],"sources":["src/components/RoadMap.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"container\">\n    <v-row justify=\"center\">\n      <v-col cols=\"12\">\n        <div ref=\"threeContainer\" class=\"three-container\"></div>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Add GridHelper\n      const gridHelper = new THREE.GridHelper(10, 10);\n      scene.add(gridHelper);\n\n      // Add AxesHelper\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n\n      // Add a Simple Cube\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n      const cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n\n      // Camera Position\n      camera.position.z = 5;\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  background-color: blue;\n}\n</style>\n\n<style>\n.three-container {\n  width: 100%;\n  height: 500px;\n}\n</style>\n"],"mappings":"AAWA,YAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACA;MACA,MAAAE,KAAA,OAAAL,KAAA,CAAAM,KAAA;MACA,MAAAC,MAAA,OAAAP,KAAA,CAAAQ,iBAAA,UAAAC,KAAA,CAAAC,cAAA,CAAAC,WAAA,QAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACA,MAAAC,QAAA,OAAAb,KAAA,CAAAc,aAAA;QAAAC,SAAA;MAAA;MACAF,QAAA,CAAAG,OAAA,MAAAP,KAAA,CAAAC,cAAA,CAAAC,WAAA,OAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACA,KAAAH,KAAA,CAAAC,cAAA,CAAAO,WAAA,CAAAJ,QAAA,CAAAK,UAAA;;MAEA;MACA,MAAAC,UAAA,OAAAnB,KAAA,CAAAoB,UAAA;MACAf,KAAA,CAAAgB,GAAA,CAAAF,UAAA;;MAEA;MACA,MAAAG,UAAA,OAAAtB,KAAA,CAAAuB,UAAA;MACAlB,KAAA,CAAAgB,GAAA,CAAAC,UAAA;;MAEA;MACA,MAAAE,QAAA,OAAAxB,KAAA,CAAAyB,WAAA;MACA,MAAAC,QAAA,OAAA1B,KAAA,CAAA2B,iBAAA;QAAAC,KAAA;MAAA;MACA,MAAAC,IAAA,OAAA7B,KAAA,CAAA8B,IAAA,CAAAN,QAAA,EAAAE,QAAA;MACArB,KAAA,CAAAgB,GAAA,CAAAQ,IAAA;;MAEA;MACAtB,MAAA,CAAAwB,QAAA,CAAAC,CAAA;;MAEA;MACA,MAAAC,OAAA,GAAAA,CAAA;QACAC,qBAAA,CAAAD,OAAA;QACAJ,IAAA,CAAAM,QAAA,CAAAC,CAAA;QACAP,IAAA,CAAAM,QAAA,CAAAE,CAAA;QACAxB,QAAA,CAAAyB,MAAA,CAAAjC,KAAA,EAAAE,MAAA;MACA;MAEA0B,OAAA;;MAEA;MACAM,MAAA,CAAAC,gBAAA;QACAjC,MAAA,CAAAkC,MAAA,QAAAhC,KAAA,CAAAC,cAAA,CAAAC,WAAA,QAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;QACAL,MAAA,CAAAmC,sBAAA;QACA7B,QAAA,CAAAG,OAAA,MAAAP,KAAA,CAAAC,cAAA,CAAAC,WAAA,OAAAF,KAAA,CAAAC,cAAA,CAAAE,YAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}