{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x800080);\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      renderer.shadowMap.enabled = true; // Enable shadow mapping\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 20, 10);\n      directionalLight.castShadow = true; // Enable shadows\n      scene.add(directionalLight);\n\n      // Create Road Path\n      const roadPath = new THREE.Shape();\n      roadPath.moveTo(-5, 0);\n      roadPath.lineTo(-3, 0);\n      roadPath.lineTo(-3, -2);\n      roadPath.lineTo(0, -2);\n      roadPath.lineTo(0, 1);\n      roadPath.lineTo(2, 1);\n      roadPath.lineTo(2, -3);\n      roadPath.lineTo(5, -3);\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.1,\n        bevelEnabled: false\n      };\n      const roadGeometry = new THREE.ExtrudeGeometry(roadPath, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({\n        color: 0x333333\n      });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      roadMesh.castShadow = true;\n      roadMesh.receiveShadow = true;\n      scene.add(roadMesh);\n\n      // Milestones\n      const milestones = [{\n        position: [-4, 0.2, 0],\n        color: 0xff5722\n      }, {\n        position: [-3, 0.2, -1.8],\n        color: 0xff4081\n      }, {\n        position: [0, 0.2, 0.8],\n        color: 0x3f51b5\n      }, {\n        position: [2, 0.2, -2.8],\n        color: 0x4caf50\n      }];\n      milestones.forEach((milestone, index) => {\n        const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n        const milestoneMaterial = new THREE.MeshLambertMaterial({\n          color: milestone.color\n        });\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(...milestone.position);\n        milestoneMesh.castShadow = true;\n        milestoneMesh.receiveShadow = true;\n        scene.add(milestoneMesh);\n\n        // Add text labels (simplified text)\n        const loader = new THREE.FontLoader();\n        loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {\n          const textGeometry = new THREE.TextGeometry(`Step ${index + 1}`, {\n            font: font,\n            size: 0.3,\n            height: 0.05\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({\n            color: milestone.color\n          });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(milestone.position[0] - 0.7, milestone.position[1] + 0.6, milestone.position[2]);\n          scene.add(textMesh);\n        });\n      });\n\n      // Camera Position\n      camera.position.set(5, 5, 10);\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","initThreeJS","methods","scene","Scene","background","Color","camera","PerspectiveCamera","$refs","threeContainer","offsetWidth","offsetHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","castShadow","roadPath","Shape","moveTo","lineTo","extrudeSettings","steps","depth","bevelEnabled","roadGeometry","ExtrudeGeometry","roadMaterial","MeshLambertMaterial","color","roadMesh","Mesh","rotation","x","Math","PI","y","receiveShadow","milestones","forEach","milestone","index","milestoneGeometry","CylinderGeometry","milestoneMaterial","milestoneMesh","loader","FontLoader","load","font","textGeometry","TextGeometry","size","height","textMaterial","MeshBasicMaterial","textMesh","lookAt","animate","requestAnimationFrame","render","window","addEventListener","aspect","updateProjectionMatrix"],"sources":["src/components/RoadMap.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"container\">\n    <v-row justify=\"center\">\n      <v-col cols=\"12\">\n        <div ref=\"threeContainer\" class=\"three-container\"></div>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x800080);\n\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      renderer.shadowMap.enabled = true; // Enable shadow mapping\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(10, 20, 10);\n      directionalLight.castShadow = true; // Enable shadows\n      scene.add(directionalLight);\n\n      // Create Road Path\n      const roadPath = new THREE.Shape();\n      roadPath.moveTo(-5, 0);\n      roadPath.lineTo(-3, 0);\n      roadPath.lineTo(-3, -2);\n      roadPath.lineTo(0, -2);\n      roadPath.lineTo(0, 1);\n      roadPath.lineTo(2, 1);\n      roadPath.lineTo(2, -3);\n      roadPath.lineTo(5, -3);\n\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.1,\n        bevelEnabled: false,\n      };\n\n      const roadGeometry = new THREE.ExtrudeGeometry(roadPath, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({ color: 0x333333 });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      roadMesh.castShadow = true;\n      roadMesh.receiveShadow = true;\n      scene.add(roadMesh);\n\n      // Milestones\n      const milestones = [\n        { position: [-4, 0.2, 0], color: 0xff5722 },\n        { position: [-3, 0.2, -1.8], color: 0xff4081 },\n        { position: [0, 0.2, 0.8], color: 0x3f51b5 },\n        { position: [2, 0.2, -2.8], color: 0x4caf50 },\n      ];\n\n      milestones.forEach((milestone, index) => {\n        const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n        const milestoneMaterial = new THREE.MeshLambertMaterial({ color: milestone.color });\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(...milestone.position);\n        milestoneMesh.castShadow = true;\n        milestoneMesh.receiveShadow = true;\n        scene.add(milestoneMesh);\n\n        // Add text labels (simplified text)\n        const loader = new THREE.FontLoader();\n        loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\n          const textGeometry = new THREE.TextGeometry(`Step ${index + 1}`, {\n            font: font,\n            size: 0.3,\n            height: 0.05,\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({ color: milestone.color });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(milestone.position[0] - 0.7, milestone.position[1] + 0.6, milestone.position[2]);\n          scene.add(textMesh);\n        });\n      });\n\n      // Camera Position\n      camera.position.set(5, 5, 10);\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  background-color: #800080;\n}\n</style>\n\n<style>\n.three-container {\n  width: 100%;\n  height: 600px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}