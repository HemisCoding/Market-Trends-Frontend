{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      searchQuery: '',\n      showWidgets: false,\n      searchInitiated: false,\n      animatedText: 'Search and analyse any stock...',\n      loading: false,\n      sliderValue: 0,\n      trackColor: 'purple',\n      thumbColor: 'white',\n      chart: null\n    };\n  },\n  methods: {\n    onSearch() {\n      this.searchInitiated = true;\n      this.showWidgets = true;\n      this.loading = true;\n      setTimeout(() => {\n        this.loading = false;\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 2000);\n    },\n    onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n    // fetchStockData() {\n    //   axios.get('api/stock_prices?ticker=' + this.searchQuery)\n    //     .then(response => {\n    //       const data = response.data; \n    //       this.renderChart(data);\n    //     })\n    //     .catch(error => console.error(\"Error fetching stock data:\", error));\n    // },\n    // renderChart(stockData) {\n    //   const ctx = document.getElementById('stockChart').getContext('2d');\n    //   if (this.chart) {\n    //     this.chart.destroy(); // Destroy the existing chart instance if it exists\n    //   }\n    //   this.chart = new Chart(ctx, {\n    //     type: 'line',\n    //     data: {\n    //       labels: stockData.dates, // array of dates\n    //       datasets: [{\n    //         label: 'Stock Price',\n    //         data: stockData.prices, // array of prices\n    //         borderColor: 'rgb(75, 192, 192)',\n    //         tension: 0.1\n    //       }]\n    //     },\n    //     options: {\n    //       scales: {\n    //         y: {\n    //           beginAtZero: false\n    //         }\n    //       }\n    //     }\n    //   });\n    // },\n\n    //hardcoded one\n\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"],\n          // Years from 2010 to 2023\n          datasets: [{\n            label: 'Stock Price',\n            data: [120, 150, 180, 130, 160, 190, 220, 250, 210, 230, 200, 240, 270, 300],\n            // Example stock prices\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n  },\n  watch: {\n    searchQuery(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.fetchStockData();\n      }\n    }\n  },\n  mounted() {\n    this.renderHardcodedChart();\n\n    // Example: animate to 80% on mount\n    setTimeout(() => {\n      this.animateToBuySellPercentage(80);\n    }, 1000); // Delay for demonstration\n  }\n};","map":{"version":3,"names":["Chart","axios","data","searchQuery","showWidgets","searchInitiated","animatedText","loading","sliderValue","trackColor","thumbColor","chart","methods","onSearch","setTimeout","onSliderChange","animateToBuySellPercentage","percentage","renderHardcodedChart","ctx","document","getElementById","getContext","destroy","type","labels","datasets","label","borderColor","tension","options","scales","y","beginAtZero","responsive","maintainAspectRatio","watch","newVal","oldVal","fetchStockData","mounted"],"sources":["src/components/FinancialAnalyser.vue"],"sourcesContent":["<template>\n    <v-app>\n      <v-container fluid class=\"container\">\n        <v-row align=\"center\">\n            <v-col cols=\"auto\" class=\"logo-container\">\n                <img src=\"@/assets/Success.png\" height=\"100\"> \n            </v-col>\n            <v-col cols=\"auto\">\n                <span class=\"tool-name\">StockSift</span>\n            </v-col>\n        </v-row>\n        <v-row justify=\"center\" align=\"center\" class=\"text-center\">\n                <v-col cols=\"12\">\n                <div class=\"typewriter\">\n                    <h1>{{ animatedText }}</h1>\n                </div>\n                <div v-if=\"showWidgets\">>\n                    <v-col cols=\"12\">\n                        <v-card class=\"widget-format\">\n                          <canvas id=\"stockChart\"></canvas>\n                            <!-- <v-card-title>Widget</v-card-title>\n                            <v-card-text>Conținutul pentru</v-card-text> -->\n                        </v-card>\n                    </v-col>\n                </div>\n                    <div class=\"second-row\">\n                    <v-col cols=\"12\" sm=\"8\" md=\"6\">\n                        <v-text-field\n                            v-model=\"searchQuery\"\n                            label=\"Search by Ticker Symbol\"\n                            append-icon=\"mdi-magnify\"\n                            @click:append=\"onSearch\"\n                            @keyup.enter=\"onSearch\"\n                            :loading=\"loading\"\n                            outlined\n                            dense\n                            class=\"text-field white-text\"\n                        ></v-text-field>\n                    </v-col>\n                    <v-col cols=\"12\" sm=\"3\" md=\"6\">\n                        <div class=\"slider-container\" v-if=\"showWidgets\">\n                        <v-slider\n                            v-model=\"sliderValue\"\n                            :max=\"100\"\n                            append-icon=\"SELL\"\n                            prepend-icon=\"BUY\"\n                            :track-color=\"trackColor\"\n                            :thumb-color=\"thumbColor\"\n                            thumb-label=\"always\"\n                            @change=\"onSliderChange\"\n                        ></v-slider>\n                        </div>\n                    </v-col>\n                </div>\n                </v-col>\n            </v-row>\n\n        <!-- Container pentru widget-uri, afișat doar după căutare -->\n        <v-row v-if=\"showWidgets\">\n          <v-col cols=\"12\" md=\"6\" lg=\"4\" >\n            <v-card class=\"widget-format\">\n              <v-card-title>Widget</v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-card-title>Widget</v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\" lg=\"4\">\n            <v-card class=\"widget-format\">\n              <v-card-title>Widget</v-card-title>\n              <v-card-text>Conținutul pentru</v-card-text>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-app>\n  </template>\n  \n  <script>\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\n\n  export default {\n    data() {\n      return {\n        searchQuery: '',\n        showWidgets: false,\n        searchInitiated: false,\n        animatedText: 'Search and analyse any stock...',\n        loading: false,\n        sliderValue: 0,\n        trackColor: 'purple',\n        thumbColor: 'white',\n        chart: null,\n      };\n    },\n    methods: {\n      onSearch() {\n        this.searchInitiated = true;\n        this.showWidgets = true;\n        this.loading = true;\n      setTimeout(() => {\n        this.loading = false;\n        // Aici poți adăuga logica pentru afișarea widget-urilor după încărcare\n      }, 2000);\n      },\n\n      onSliderChange() {\n      // Logic to handle when the slider changes\n    },\n\n    animateToBuySellPercentage(percentage) {\n      // Animate the slider to the buy/sell percentage\n      this.sliderValue = percentage;\n    },\n\n    // fetchStockData() {\n    //   axios.get('api/stock_prices?ticker=' + this.searchQuery)\n    //     .then(response => {\n    //       const data = response.data; \n    //       this.renderChart(data);\n    //     })\n    //     .catch(error => console.error(\"Error fetching stock data:\", error));\n    // },\n    // renderChart(stockData) {\n    //   const ctx = document.getElementById('stockChart').getContext('2d');\n    //   if (this.chart) {\n    //     this.chart.destroy(); // Destroy the existing chart instance if it exists\n    //   }\n    //   this.chart = new Chart(ctx, {\n    //     type: 'line',\n    //     data: {\n    //       labels: stockData.dates, // array of dates\n    //       datasets: [{\n    //         label: 'Stock Price',\n    //         data: stockData.prices, // array of prices\n    //         borderColor: 'rgb(75, 192, 192)',\n    //         tension: 0.1\n    //       }]\n    //     },\n    //     options: {\n    //       scales: {\n    //         y: {\n    //           beginAtZero: false\n    //         }\n    //       }\n    //     }\n    //   });\n    // },\n\n\n    //hardcoded one\n\n    renderHardcodedChart() {\n      const ctx = document.getElementById('stockChart').getContext('2d');\n      if (this.chart) {\n        this.chart.destroy(); // Destroy the existing chart if it exists\n      }\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"], // Years from 2010 to 2023\n          datasets: [{\n            label: 'Stock Price',\n            data: [120, 150, 180, 130, 160, 190, 220, 250, 210, 230, 200, 240, 270, 300], // Example stock prices\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n    },\n\n    watch: {\n    searchQuery(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.fetchStockData();\n      }\n    }\n  },\n    mounted() {\n      this.renderHardcodedChart();\n\n    // Example: animate to 80% on mount\n    setTimeout(() => {\n      this.animateToBuySellPercentage(80);\n    }, 1000); // Delay for demonstration\n  }\n  };\n  </script>\n  \n  <style scoped>\n  \n.container {\n    background-image: linear-gradient(to bottom, #2c3e50, #2d3141, #292632, #221c23, #181316, #120e10, #0a0708, #000000, #000000, #000000, #000000, #000000);\n    height: 100%;\n}\n\n.typewriter h1 {\n    color: #FFFFFF; \n  text-shadow: \n    1px 1px 0px #ddd, \n    2px 2px 0px #d4d4d4, \n    2px 2px 0px #ccc; \n  font-size: 2.5em; /* Adjust the size of the text */\n  font-weight: bold;\n  overflow: hidden;\n  border-right: .15em solid black;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: .15em;\n  font-family: Courier, monospace;\n\n  animation: typing 3.5s steps(40, end), blink-caret .75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent }\n  50% { border-color: black }\n}\n\n  \n#app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n  }\n  \nheader {\n    background-color: #42b983;\n    color: white;\n    padding: 10px;\n  }\n  \nmain {\n    margin: 20px;\n  }\n  \nfooter {\n    color: #586069;\n    padding: 10px;\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    background: rgb(2,0,36);\n  }\n\n.widget-format{\n    background-color: transparent;\n    \n}\n\n.slider-container {\n  padding: 20px;\n  background-image: linear-gradient(to bottom, #2c3e50, #2d3141, #292632, #221c23, #181316, #120e10, #0a0708, #000000, #000000, #000000, #000000, #000000);\n}\n\n.second-row {\n    display: flex;\n    margin-top: 3vh;\n}\n\n.logo-container {\n    padding-right: 0vw;\n    padding-left: 1vw;\n}\n\n.tool-name {\n  font-size: 1.2rem; /* Adaptează dimensiunea fontului după necesități */\n  font-weight: bold;\n  font-size: 3vh;\n  color: #FFFFFF; /* Schimbă culoarea dacă este necesar */\n}\n\n.text-field .v-label,\n.text-field .v-input__control .v-input__slot .v-text-field__slot input,\n.text-field .v-input__control .v-input__slot {\n    color: white !important; /* Setează culoarea textului și a etichetei */\n}\n\n.text-field.v-text-field--outlined .v-input__control::before {\n    border-color: white !important; /* Setează culoarea marginii când câmpul nu este focusat */\n}\n\n.text-field.v-text-field--outlined .v-input__control::after {\n    border-color: white !important; /* Setează culoarea marginii când câmpul este focusat */\n}\n\n  </style>\n  "],"mappings":"AAmFA,OAAAA,KAAA;AACA,OAAAC,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,WAAA;MACAC,eAAA;MACAC,YAAA;MACAC,OAAA;MACAC,WAAA;MACAC,UAAA;MACAC,UAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,SAAA;MACA,KAAAR,eAAA;MACA,KAAAD,WAAA;MACA,KAAAG,OAAA;MACAO,UAAA;QACA,KAAAP,OAAA;QACA;MACA;IACA;IAEAQ,eAAA;MACA;IAAA,CACA;IAEAC,2BAAAC,UAAA;MACA;MACA,KAAAT,WAAA,GAAAS,UAAA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;;IAEAC,qBAAA;MACA,MAAAC,GAAA,GAAAC,QAAA,CAAAC,cAAA,eAAAC,UAAA;MACA,SAAAX,KAAA;QACA,KAAAA,KAAA,CAAAY,OAAA;MACA;MACA,KAAAZ,KAAA,OAAAX,KAAA,CAAAmB,GAAA;QACAK,IAAA;QACAtB,IAAA;UACAuB,MAAA;UAAA;UACAC,QAAA;YACAC,KAAA;YACAzB,IAAA;YAAA;YACA0B,WAAA;YACAC,OAAA;UACA;QACA;QACAC,OAAA;UACAC,MAAA;YACAC,CAAA;cACAC,WAAA;YACA;UACA;UACAC,UAAA;UACAC,mBAAA;QACA;MACA;IACA;EACA;EAEAC,KAAA;IACAjC,YAAAkC,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAC,cAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAtB,oBAAA;;IAEA;IACAJ,UAAA;MACA,KAAAE,0BAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}