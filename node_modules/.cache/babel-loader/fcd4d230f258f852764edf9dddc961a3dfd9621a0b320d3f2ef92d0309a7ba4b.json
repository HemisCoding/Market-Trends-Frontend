{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const light = new THREE.PointLight(0xffffff, 1, 100);\n      light.position.set(10, 10, 10);\n      scene.add(light);\n\n      // Create Road\n      const roadShape = new THREE.Shape();\n      roadShape.moveTo(-5, -1);\n      roadShape.lineTo(5, -1);\n      roadShape.lineTo(5, 1);\n      roadShape.lineTo(-5, 1);\n      roadShape.lineTo(-5, -1);\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.2,\n        bevelEnabled: false\n      };\n      const roadGeometry = new THREE.ExtrudeGeometry(roadShape, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({\n        color: 0x333333\n      });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      scene.add(roadMesh);\n\n      // Create Milestones\n      const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n      const milestoneMaterial = new THREE.MeshLambertMaterial({\n        color: 0xff0000\n      });\n      const milestones = [];\n      for (let i = 0; i < 4; i++) {\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(-4 + i * 3, 0.5, 0);\n        scene.add(milestoneMesh);\n        milestones.push(milestoneMesh);\n      }\n\n      // Add Text Labels (you'll need to include the Three.js TextGeometry library)\n      const loader = new THREE.FontLoader();\n      loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {\n        for (let i = 0; i < milestones.length; i++) {\n          const textGeometry = new THREE.TextGeometry(`Step ${i + 1}`, {\n            font: font,\n            size: 0.5,\n            height: 0.1\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({\n            color: 0x0000ff\n          });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(-4 + i * 3 - 0.7, 1.5, 0);\n          scene.add(textMesh);\n        }\n      });\n\n      // Camera Position\n      camera.position.z = 10;\n      camera.position.y = 5;\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","initThreeJS","methods","scene","Scene","camera","PerspectiveCamera","$refs","threeContainer","offsetWidth","offsetHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","light","PointLight","position","set","add","roadShape","Shape","moveTo","lineTo","extrudeSettings","steps","depth","bevelEnabled","roadGeometry","ExtrudeGeometry","roadMaterial","MeshLambertMaterial","color","roadMesh","Mesh","rotation","x","Math","PI","y","milestoneGeometry","CylinderGeometry","milestoneMaterial","milestones","i","milestoneMesh","push","loader","FontLoader","load","font","length","textGeometry","TextGeometry","size","height","textMaterial","MeshBasicMaterial","textMesh","z","lookAt","animate","requestAnimationFrame","render","window","addEventListener","aspect","updateProjectionMatrix"],"sources":["src/components/RoadMap.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"container\">\n    <v-row justify=\"center\">\n      <v-col cols=\"12\">\n        <div ref=\"threeContainer\" class=\"three-container\"></div>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeDRoadmap',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Basic Scene Setup\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      this.$refs.threeContainer.appendChild(renderer.domElement);\n\n      // Lighting\n      const light = new THREE.PointLight(0xffffff, 1, 100);\n      light.position.set(10, 10, 10);\n      scene.add(light);\n\n      // Create Road\n      const roadShape = new THREE.Shape();\n      roadShape.moveTo(-5, -1);\n      roadShape.lineTo(5, -1);\n      roadShape.lineTo(5, 1);\n      roadShape.lineTo(-5, 1);\n      roadShape.lineTo(-5, -1);\n\n      const extrudeSettings = {\n        steps: 2,\n        depth: 0.2,\n        bevelEnabled: false\n      };\n\n      const roadGeometry = new THREE.ExtrudeGeometry(roadShape, extrudeSettings);\n      const roadMaterial = new THREE.MeshLambertMaterial({ color: 0x333333 });\n      const roadMesh = new THREE.Mesh(roadGeometry, roadMaterial);\n      roadMesh.rotation.x = Math.PI / 2;\n      roadMesh.position.y = 0;\n      scene.add(roadMesh);\n\n      // Create Milestones\n      const milestoneGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.5, 32);\n      const milestoneMaterial = new THREE.MeshLambertMaterial({ color: 0xff0000 });\n\n      const milestones = [];\n      for (let i = 0; i < 4; i++) {\n        const milestoneMesh = new THREE.Mesh(milestoneGeometry, milestoneMaterial);\n        milestoneMesh.position.set(-4 + i * 3, 0.5, 0);\n        scene.add(milestoneMesh);\n        milestones.push(milestoneMesh);\n      }\n\n      // Add Text Labels (you'll need to include the Three.js TextGeometry library)\n      const loader = new THREE.FontLoader();\n      loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\n        for (let i = 0; i < milestones.length; i++) {\n          const textGeometry = new THREE.TextGeometry(`Step ${i + 1}`, {\n            font: font,\n            size: 0.5,\n            height: 0.1,\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(-4 + i * 3 - 0.7, 1.5, 0);\n          scene.add(textMesh);\n        }\n      });\n\n      // Camera Position\n      camera.position.z = 10;\n      camera.position.y = 5;\n      camera.lookAt(0, 0, 0);\n\n      // Animation Loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n\n      // Handle resize\n      window.addEventListener('resize', () => {\n        camera.aspect = this.$refs.threeContainer.offsetWidth / this.$refs.threeContainer.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(this.$refs.threeContainer.offsetWidth, this.$refs.threeContainer.offsetHeight);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  background-color: blue;\n}\n</style>\n\n<style>\n.three-container {\n  width: 100%;\n  height: 500px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}